# Импортируйте необходимые модули
import datetime as dt

FORMAT = '%H:%M:%S' # Запишите формат полученного времени.
WEIGHT = 75  # Вес.
HEIGHT = 175  # Рост.
K_1 = 0.035  # Коэффициент для подсчета калорий.
K_2 = 0.029  # Коэффициент для подсчета калорий.
STEP_M = 0.65  # Длина шага в метрах.

storage_data = {}  # Словарь для хранения полученных данных.


def check_correct_data(data):
    """Проверка корректности полученного пакета."""
    # Распоковываем кортеж, чтобы работать с каждыми элементами отдельно
    tim, steps = data
    # Считаем количество элементов в пакете
    if len(data) != 2:
        return False
    elif tim == None:
        return False
    elif steps == None:
        return False
    else:
        return True
        
    # Если длина пакета отлична от 2
    # или один из элементов пакета имеет пустое значение -
    # функция вернет False, иначе - True.


def check_correct_time(time):
    """Проверка корректности параметра времени.""" 
    if  not storage_data:
        #print('Словарь пуст')
        return False
    elif time <= max(storage_data.keys()):
        return False
    else:
        return True
    # Если словарь для хранения не пустой
    # и значение времени, полученное в аргументе,
    # меньше или равно самому большому значению ключа в словаре,
    # функция вернет False.
    # Иначе - True 


def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""
    sum_st = 0
    for day_st in storage_data.values():
        sum_st+=day_st
    return sum_st+steps
    # Посчитайте все шаги, записанные в словарь storage_data,
    # прибавьте к ним значение из последнего пакета
    # и верните  эту сумму.
    

def get_distance(steps):
    ...
    """Получить дистанцию пройденного пути в км."""
    # Посчитайте дистанцию в километрах,
    # исходя из количества шагов и длины шага.


def get_spent_calories(dist, current_time):
    ...
    """Получить значения потраченных калорий."""
    # В уроке «Последовательности» вы написали формулу расчета калорий.
    # Перенесите её сюда и верните результат расчётов.
    # Для расчётов вам потребуется значение времени; 
    # получите его из объекта current_time;
    # переведите часы и минуты в часы, в значение типа float.

def get_achievement(dist):
    ...
    """Получить поздравления за пройденную дистанцию."""
    # В уроке «Строки» вы описали логику
    # вывода сообщений о достижении в зависимости
    # от пройденной дистанции.
    # Перенесите этот код сюда и замените print() на return.


# Место для функции show_message.
def show_message(time,day_steps):
    message = f'''
Время: {time}.
Количество шагов за сегодня: {day_steps}.
'''
    print(message)

def accept_package(data):
    """Обработать пакет данных."""
    # Вызов функции проверки корректности пакета
    check_data = check_correct_data(data)
    if  check_data == False:# Если функция проверки пакета вернет False
        return 'Некорректный пакет'
    
    # Распакуйте полученные данные.
    # Распоковываем кортеж, чтобы работать с каждыми элементами отдельно
    tim, steps = data
    # Преобразуйте строку с временем в объект типа time.
    pack_time = dt.datetime.strptime(tim, FORMAT).time() 
    
    check_time = check_correct_time(pack_time)
    if  check_time == False:# Если функция проверки значения времени вернет False
        return 'Некорректное значение времени'

    day_steps =  get_step_day(steps)# Запишите результат подсчёта пройденных шагов.
    #dist =  # Запишите результат расчёта пройденной дистанции.
    #spent_calories = # Запишите результат расчёта сожжённых калорий.
    #achievement =  # Запишите выбранное мотивирующее сообщение.
    # Вызовите функцию show_message().
    show_message(pack_time,day_steps)
    # Добавьте новый элемент в словарь storage_data. 
    storage_data [pack_time] = day_steps
    # Верните словарь storage_data.
    return storage_data

# Данные для самопроверки.Не удаляйте их.
package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)

accept_package(package_0)
accept_package(package_1)
accept_package(package_2)
accept_package(package_3)
accept_package(package_4)
